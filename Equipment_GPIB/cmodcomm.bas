Attribute VB_Name = "cmodcomm"
'//===========================================================
'// Visual Baisc interface module cmodcomm
'// For CmodComm.h interface to CmodComm.dll
'// generated by python script [mku] (htodll.py:Tue Jan 29 06:05:51 2008) (setup.py:Fri Jan 04 20:53:12 2008)
' assuming CmodComm.dll is installed at C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll

'//===========================================================
'// End of Prologue
'//===========================================================

'-------------------------------------------------------------------------
' CMOD_Frequency_Descriptor_of_MHz
'-------------------------------------------------------------------------
' // Find the best-fit CMOD frequency descriptor for a requested speed
' //
' // On Entry:
' //      freq_MHz = requested frequency or period cycle time, in megahertz
' //
' // On Exit:
' //      return value = frequency or period descriptor
' //
' // TEST_VECTOR:ARGUMENT: freq_MHz = 8.0
' // TEST_VECTOR:EXPECT_RETURN: 0x11
' uint8_t __stdcall DLLIMPORT CMOD_Frequency_Descriptor_of_MHz(const double freq_MHz);
'
' argument list from C declaration:
'        const double freq_MHz
'
' return type from C declaration:
'        uint8_t
'
Public Declare Function CMOD_Frequency_Descriptor_of_MHz _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal freq_MHz As Double _
    ) _
    As Byte

'-------------------------------------------------------------------------
' CMOD_Frequency_Descriptor_of_usec
'-------------------------------------------------------------------------
' // Find the best-fit CMOD frequency descriptor for a requested speed
' //
' // On Entry:
' //      cycle_time_usec = requested frequency or period cycle time, in microseconds
' //
' // On Exit:
' //      return value = frequency or period descriptor
' //
' // TEST_VECTOR:ARGUMENT: cycle_time_usec = 1.0
' // TEST_VECTOR:EXPECT_RETURN: 0x20
' uint8_t __stdcall DLLIMPORT CMOD_Frequency_Descriptor_of_usec(const double cycle_time_usec);
'
' argument list from C declaration:
'        const double cycle_time_usec
'
' return type from C declaration:
'        uint8_t
'
Public Declare Function CMOD_Frequency_Descriptor_of_usec _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal cycle_time_usec As Double _
    ) _
    As Byte

'-------------------------------------------------------------------------
' CmodBoardAutoBaud
'-------------------------------------------------------------------------
' // Enable or disable automatic baud rate searching.
' //
' // On Entry:
' //      AutoBaudFlag = true to enable automatic baud rate determination
' //      AutoBaudFlag = false to disable automatic baud rate determination
' //
' // On Exit:
' //      return value = true if success
' //
' // DEPRECATED. Do not expect this function to be implemented in the future.
' //
' bool __stdcall DLLIMPORT CmodBoardAutoBaud(bool AutoBaudFlag);
'
' argument list from C declaration:
'        bool AutoBaudFlag
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodBoardAutoBaud _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal AutoBaudFlag As Boolean _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodBoardAutoPort
'-------------------------------------------------------------------------
' // Enable or disable automatic connection port searching.
' //
' // On Entry:
' //      AutoPortFlag = true to enable automatic connection port determination
' //      AutoPortFlag = false to disable automatic connection port determination
' //
' // On Exit:
' //      return value = true if success
' //
' bool __stdcall DLLIMPORT CmodBoardAutoPort(bool AutoPortFlag);
'
' argument list from C declaration:
'        bool AutoPortFlag
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodBoardAutoPort _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal AutoPortFlag As Boolean _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodBoardBannerRequiresPrefix
'-------------------------------------------------------------------------
' // Specify a string to compare against firmware banner message,
' // to filter out unwanted board connections.
' // Default value is "Maxim".
' // See CmodBoardGetBanner function.
' //
' // On Entry:
' //      BoardBannerPrefix = null-terminated string
' //
' void __stdcall DLLIMPORT CmodBoardBannerRequiresPrefix(const char IN BoardBannerPrefix[]);
'
' argument list from C declaration:
'        const char IN BoardBannerPrefix[]
'            C_type_root  pointer
'            PointerTo    char
'            Modifiers    ['IN']
'
Public Declare Sub CmodBoardBannerRequiresPrefix _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal BoardBannerPrefix As String _
    )

'-------------------------------------------------------------------------
' CmodBoardBanner_GetRequiredPrefix
'-------------------------------------------------------------------------
' // Specify a string to compare against firmware banner message,
' // to filter out unwanted board connections.
' // Default value is "Maxim".
' // See CmodBoardGetBanner function.
' //
' // On Entry:
' //      buffer points to a caller-allocated string buffer
' //      buffer_size contains the size of the buffer
' //
' // On Exit:
' //      buffer[] contains the required firmware banner prefix,
' //          previously set by CmodBoardBannerRequiresPrefix
' //
' // TEST_VECTOR:COMMENT: Verify default value. Hardware is not required.
' // TEST_VECTOR:ARGUMENT: buffer SIZE 80
' // TEST_VECTOR:ARGUMENT: buffer_size SIZEOF buffer
' // TEST_VECTOR:EXPECT_RETURN:
' // TEST_VECTOR:EXPECT_BUFFER: buffer = "Maxim"
' // 01/28/2008 [mku] VERIFY REMOVED LIMITATION FOR Python extension GenCmodComm: CmodBoardBanner_GetRequiredPrefix
' // cmodpy.c implementation of cmodpy_CmodBoardBanner_GetRequiredPrefix
' // declares unsigned int buffer_size twice.
' void __stdcall DLLIMPORT CmodBoardBanner_GetRequiredPrefix(char OUT buffer[], unsigned int BUFSIZE buffer_size);
'
' argument list from C declaration:
'        char OUT buffer[]
'            C_type_root  pointer
'            PointerTo    char
'            Modifiers    ['OUT']
'        unsigned int BUFSIZE buffer_size
'
Public Declare Sub CmodBoardBanner_GetRequiredPrefix _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByRef buffer As Byte, _
        ByVal buffer_size As Integer _
    )

'-------------------------------------------------------------------------
' CmodBoardConfirmFirmwareVersion
'-------------------------------------------------------------------------
' // Verify the correct firmware version is installed.
' //
' // On Exit:
' //      Return value = true if loaded firmware version >= requested firmware version
' //
' // TEST_VECTOR:OPERATOR_SET_CONDITION: Connect a MINIQUSB board to the USB port
' // TEST_VECTOR:HARDWARE_REQUIRED: MINIQUSB
' // TEST_VECTOR:COMMENT: The standard MINIQUSB firmware is version 01.05.39.
' // TEST_VECTOR:ARGUMENT: Firmware_Version_Major_Required = 1
' // TEST_VECTOR:ARGUMENT: Firmware_Version_Minor_Required = 5
' // TEST_VECTOR:ARGUMENT: Firmware_Build_Number_Required = 39
' // TEST_VECTOR:EXPECT_RETURN: true
' bool __stdcall DLLIMPORT CmodBoardConfirmFirmwareVersion(
' const uint8_t Firmware_Version_Major_Required,
' const uint8_t Firmware_Version_Minor_Required,
' const uint8_t Firmware_Build_Number_Required);
'
' argument list from C declaration:
'        const uint8_t Firmware_Version_Major_Required
'        const uint8_t Firmware_Version_Minor_Required
'        const uint8_t Firmware_Build_Number_Required
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodBoardConfirmFirmwareVersion _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal Firmware_Version_Major_Required As Byte, _
        ByVal Firmware_Version_Minor_Required As Byte, _
        ByVal Firmware_Build_Number_Required As Byte _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodBoardConnect
'-------------------------------------------------------------------------
' // Attempt to connect to the module, unless it is already connected.
' // Accept the first module found.
' //
' // On Exit:
' //      return value = true if connection was successfully established
' //
' // TEST_VECTOR:OPERATOR_SET_CONDITION: Start with MINIQUSB board not connected to the USB port
' // TEST_VECTOR:EXPECT_RETURN: false
' // TEST_VECTOR:OPERATOR_SET_CONDITION: Connect a MINIQUSB board to the USB port
' // TEST_VECTOR:EXPECT_RETURN: true
' bool __stdcall DLLIMPORT CmodBoardConnect(void);
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodBoardConnect _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodBoardConnectAnyRS232
'-------------------------------------------------------------------------
' // Attempt to connect to the module, unless it is already connected.
' // Attempt RS232 COM port connections only.
' // Accept the first module found.
' //
' // On Exit:
' //      return value = true if connection was successfully established
' //
' bool __stdcall DLLIMPORT CmodBoardConnectAnyRS232(void);
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodBoardConnectAnyRS232 _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodBoardConnectAnyUSB
'-------------------------------------------------------------------------
' // Attempt to connect to the module, unless it is already connected.
' // Attempt USB connections only.
' // Accept the first module found.
' //
' // On Exit:
' //      return value = true if connection was successfully established
' //
' bool __stdcall DLLIMPORT CmodBoardConnectAnyUSB(void);
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodBoardConnectAnyUSB _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodBoardConnected
'-------------------------------------------------------------------------
' // Test whether module is present.
' //
' // On Exit:
' //      return value = true if connection was previously established
' //
' bool __stdcall DLLIMPORT CmodBoardConnected(void);
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodBoardConnected _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodBoardDisconnect
'-------------------------------------------------------------------------
' // Disconnect from the module.
' // Optional funciton provided for testability.
' //
' void __stdcall DLLIMPORT CmodBoardDisconnect(void);
'
Public Declare Sub CmodBoardDisconnect _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
    )

'-------------------------------------------------------------------------
' CmodBoardGetAutoBaud
'-------------------------------------------------------------------------
' // Get automatic baud rate search flag.
' //
' // On Exit:
' //      return value = AutoBaudFlag
' //
' // DEPRECATED. Do not expect this function to be implemented in the future.
' //
' bool __stdcall DLLIMPORT CmodBoardGetAutoBaud(void);
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodBoardGetAutoBaud _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodBoardGetBanner
'-------------------------------------------------------------------------
' // Get the module firmware identification banner.
' //
' // On Entry:
' //      buffer points to a caller-allocated string buffer
' //      buffer_size contains the size of the buffer
' //
' // On Exit:
' //      buffer[] contains the firmware banner
' //
' // TEST_VECTOR:OPERATOR_SET_CONDITION: Connect a MINIQUSB board to the USB port
' // TEST_VECTOR:HARDWARE_REQUIRED: MINIQUSB
' // TEST_VECTOR:ARGUMENT: buffer SIZE 30
' // TEST_VECTOR:ARGUMENT: buffer_size SIZEOF buffer
' // TEST_VECTOR:EXPECT_RETURN: true
' // TEST_VECTOR:COMMENT: Assuming the connected hardware uses MINIQUSB or equivalent firmware
' // TEST_VECTOR:EXPECT_BUFFER: buffer = "Maxim MINIQUSB 01.05.39 >"
' bool __stdcall DLLIMPORT CmodBoardGetBanner(char OUT buffer[], unsigned int BUFSIZE buffer_size);
'
' argument list from C declaration:
'        char OUT buffer[]
'            C_type_root  pointer
'            PointerTo    char
'            Modifiers    ['OUT']
'        unsigned int BUFSIZE buffer_size
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodBoardGetBanner _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByRef buffer As Byte, _
        ByVal buffer_size As Integer _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodBoardGetBaud
'-------------------------------------------------------------------------
' // Determine which baud rate the connected board uses.
' //
' // On Exit:
' //      return value = baud rate (typically 115200)
' //
' // DEPRECATED. Do not expect this function to be implemented in the future.
' //
' int __stdcall DLLIMPORT CmodBoardGetBaud(void);
'
' return type from C declaration:
'        int
'
Public Declare Function CmodBoardGetBaud _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
    ) _
    As Integer

'-------------------------------------------------------------------------
' CmodBoardGetPort
'-------------------------------------------------------------------------
' // Determine which port the board is connected to.
' //
' // On Exit:
' //      return value = 0 for first available port (typically COM1)
' //      return value = 1 for second port (typically COM2)
' //      return value = 2 for third port
' //      etc.
' //
' int __stdcall DLLIMPORT CmodBoardGetPort(void);
'
' return type from C declaration:
'        int
'
Public Declare Function CmodBoardGetPort _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
    ) _
    As Integer

'-------------------------------------------------------------------------
' CmodBoardGetPortName
'-------------------------------------------------------------------------
' // Get the interface port name.
' //
' // On Entry:
' //      buffer points to a caller-allocated string buffer
' //      buffer_size contains the size of the buffer
' //
' // On Exit:
' //      buffer[] contains the device name of the connected port.
' //      For RS232 COM ports, the actual device name is returned ("\\.\COM1").
' //      For USB devices, the return string is "USB:0", "USB:1", etc.
' //      For MAXSMBUS devices, the return string is "MAXSMBUS".
' //
' bool __stdcall DLLIMPORT CmodBoardGetPortName(char OUT buffer[], unsigned int BUFSIZE buffer_size);
'
' argument list from C declaration:
'        char OUT buffer[]
'            C_type_root  pointer
'            PointerTo    char
'            Modifiers    ['OUT']
'        unsigned int BUFSIZE buffer_size
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodBoardGetPortName _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByRef buffer As Byte, _
        ByVal buffer_size As Integer _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodBoardPortListUpdate
'-------------------------------------------------------------------------
' // Update the list of interface ports where the CMOD232 could be attached.
' //
' void __stdcall DLLIMPORT CmodBoardPortListUpdate(void);
'
Public Declare Sub CmodBoardPortListUpdate _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
    )

'-------------------------------------------------------------------------
' CmodBoardReset
'-------------------------------------------------------------------------
' // Reset the module.
' //
' void __stdcall DLLIMPORT CmodBoardReset(void);
'
Public Declare Sub CmodBoardReset _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
    )

'-------------------------------------------------------------------------
' CmodBoardSetBaud
'-------------------------------------------------------------------------
' // Specify which baud rate the next call to CmodBoardConnect must use.
' //
' // On Entry:
' //      BaudRate = 115200 for CMOD232 board
' //
' // DEPRECATED. Do not expect this function to be implemented in the future.
' //
' int __stdcall DLLIMPORT CmodBoardSetBaud(int BaudRate);
'
' argument list from C declaration:
'        int BaudRate
'
' return type from C declaration:
'        int
'
Public Declare Function CmodBoardSetBaud _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal BaudRate As Integer _
    ) _
    As Integer

'-------------------------------------------------------------------------
' CmodBoardSetPort
'-------------------------------------------------------------------------
' // Specify which port the next call to CmodBoardConnect must use.
' //
' // On Entry:
' //      PortNumber = 0 for first available com port (typically COM1)
' //      PortNumber = 1 for second com port (typically COM2)
' //      PortNumber = 2 for third com port
' //      etc.
' //
' int __stdcall DLLIMPORT CmodBoardSetPort(int PortNumber);
'
' argument list from C declaration:
'        int PortNumber
'
' return type from C declaration:
'        int
'
Public Declare Function CmodBoardSetPort _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal PortNumber As Integer _
    ) _
    As Integer

'-------------------------------------------------------------------------
' CmodComm2ByteWrite
'-------------------------------------------------------------------------
' // Send a two-byte command to the CMOD232 module.
' //
' // On Entry:
' //      Byte1 = first byte of command
' //      Byte2 = second byte of command
' //      bytecount_rx = expected number of response bytes
' //
' // On Exit:
' //      return value = true on success
' //
' bool __stdcall DLLIMPORT CmodComm2ByteWrite(uint8_t Byte1, uint8_t Byte2, unsigned int bytecount_rx);
'
' argument list from C declaration:
'        uint8_t Byte1
'        uint8_t Byte2
'        unsigned int bytecount_rx
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodComm2ByteWrite _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal Byte1 As Byte, _
        ByVal Byte2 As Byte, _
        ByVal bytecount_rx As Integer _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodCommResultChar
'-------------------------------------------------------------------------
' // Retrieve previously received characters resulting from
' // a prior call to CmodComm2ByteWrite(), CmodCommStringWrite(),
' // or CmodCommStringRead().
' //
' // On Entry:
' //      n = index where 0 <= n < CmodCommResultCharCount()
' //
' // On Exit:
' //      return value = selected character from result string
' //      return value = 0 if index is out of bounds
' //
' uint8_t __stdcall DLLIMPORT CmodCommResultChar(int n);
'
' argument list from C declaration:
'        int n
'
' return type from C declaration:
'        uint8_t
'
Public Declare Function CmodCommResultChar _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal n As Integer _
    ) _
    As Byte

'-------------------------------------------------------------------------
' CmodCommResultCharCount
'-------------------------------------------------------------------------
' // Retrieve number of received characters resulting from
' // a prior call to CmodComm2ByteWrite(), CmodCommStringWrite(),
' // or CmodCommStringRead().
' //
' // On Exit:
' //      return value = number of received bytes.
' //
' unsigned int __stdcall DLLIMPORT CmodCommResultCharCount(void);
'
' return type from C declaration:
'        unsigned int
'
Public Declare Function CmodCommResultCharCount _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
    ) _
    As Integer

'-------------------------------------------------------------------------
' CmodCommStringRead
'-------------------------------------------------------------------------
' // Receive characters from the CMOD232 module.
' //
' // This function is automatically handled by
' // both CmodComm2ByteWrite and CmodCommStringWrite.
' //
' // On Entry:
' //      requested_count = expected number of response bytes
' //      timeout_msec = length of time to wait for a response
' //
' // On Exit:
' //      return value = pointer to read-only buffer containing received bytes.
' //      This buffer is null-terminated.
' //
' const char* __stdcall DLLIMPORT CmodCommStringRead(int requested_count, int timeout_msec);
'
' argument list from C declaration:
'        int requested_count
'        int timeout_msec
'
' return type from C declaration:
'        const char*
'            C_type_root  pointer
'            PointerTo    char
'            Modifiers    []
'
Public Declare Function CmodCommStringRead _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal requested_count As Integer, _
        ByVal timeout_msec As Integer _
    ) _
    As String

'-------------------------------------------------------------------------
' CmodCommStringWrite
'-------------------------------------------------------------------------
' // Send a multi-byte command or a series of commands to the CMOD232 module.
' //
' // On Entry:
' //      str = address of buffer of byte sequence to be written
' //      bytecount_tx = number of valid bytes in str buffer
' //      bytecount_rx = expected number of response bytes
' //
' //      str is NOT a null-terminated string like C typically uses.
' //      Several CMOD232 commands include null as the valid second byte.
' //      The size of str is set by an explicit length count, not by null value termination.
' //
' // On Exit:
' //      return value = true on success
' //
' bool __stdcall DLLIMPORT CmodCommStringWrite(const uint8_t* IN str, unsigned int BUFSIZE bytecount_tx, unsigned int bytecount_rx);
'
' argument list from C declaration:
'        const uint8_t* IN str
'            C_type_root  pointer
'            PointerTo    uint8_t
'            Modifiers    ['IN']
'        unsigned int BUFSIZE bytecount_tx
'        unsigned int bytecount_rx
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodCommStringWrite _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByRef Str As Byte, _
        ByVal bytecount_tx As Integer, _
        ByVal bytecount_rx As Integer _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodGUIHide
'-------------------------------------------------------------------------
' // Make the CMOD232 GUI window invisible.
' //
' bool __stdcall DLLIMPORT CmodGUIHide(void);
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodGUIHide _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodGUIShow
'-------------------------------------------------------------------------
' // Make the CMOD232 GUI window visible.
' //
' bool __stdcall DLLIMPORT CmodGUIShow(void);
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodGUIShow _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodGUIShow2wire
'-------------------------------------------------------------------------
' // Show or hide 2-wire interface tab of the CMOD232 GUI window.
' //
' // On Entry:
' //      visible = true to make the tab visible, false to hide the tab.
' //
' bool __stdcall DLLIMPORT CmodGUIShow2wire(bool visible);
'
' argument list from C declaration:
'        bool visible
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodGUIShow2wire _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal visible As Boolean _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodGUIShowCom
'-------------------------------------------------------------------------
' // Show or hide Connection tab of the CMOD232 GUI window.
' //
' // On Entry:
' //      visible = true to make the tab visible, false to hide the tab.
' //
' bool __stdcall DLLIMPORT CmodGUIShowCom(bool visible);
'
' argument list from C declaration:
'        bool visible
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodGUIShowCom _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal visible As Boolean _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodGUIShowGPIO
'-------------------------------------------------------------------------
' // Show or hide Bit Set/Clear tab of the CMOD232 GUI window.
' //
' // On Entry:
' //      visible = true to make the tab visible, false to hide the tab.
' //
' bool __stdcall DLLIMPORT CmodGUIShowGPIO(bool visible);
'
' argument list from C declaration:
'        bool visible
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodGUIShowGPIO _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal visible As Boolean _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodGUIShowLog
'-------------------------------------------------------------------------
' // Show or hide Log tab of the CMOD232 GUI window.
' //
' // On Entry:
' //      visible = true to make the tab visible, false to hide the tab.
' //
' bool __stdcall DLLIMPORT CmodGUIShowLog(bool visible);
'
' argument list from C declaration:
'        bool visible
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodGUIShowLog _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal visible As Boolean _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodGUIShowP8Bus
'-------------------------------------------------------------------------
' // Show or hide 8-bit parallel tab of the CMOD232 GUI window.
' //
' // On Entry:
' //      visible = true to make the tab visible, false to hide the tab.
' //
' bool __stdcall DLLIMPORT CmodGUIShowP8Bus(bool visible);
'
' argument list from C declaration:
'        bool visible
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodGUIShowP8Bus _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal visible As Boolean _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodGUIShowSPI
'-------------------------------------------------------------------------
' // Show or hide 3-wire interface tab of the CMOD232 GUI window.
' //
' // On Entry:
' //      visible = true to make the tab visible, false to hide the tab.
' //
' bool __stdcall DLLIMPORT CmodGUIShowSPI(bool visible);
'
' argument list from C declaration:
'        bool visible
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodGUIShowSPI _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal visible As Boolean _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodGUIShowScript
'-------------------------------------------------------------------------
' // Show or hide Script tab of the CMOD232 GUI window.
' //
' // On Entry:
' //      visible = true to make the tab visible, false to hide the tab.
' //
' bool __stdcall DLLIMPORT CmodGUIShowScript(bool visible);
'
' argument list from C declaration:
'        bool visible
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodGUIShowScript _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal visible As Boolean _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodGUIVisible
'-------------------------------------------------------------------------
' // Make the CMOD232 GUI window visible.
' //
' // On Exit:
' //      Return value = true if GUI window is visible
' //
' bool __stdcall DLLIMPORT CmodGUIVisible(void);
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodGUIVisible _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodI2CWriteAndReadBytes
'-------------------------------------------------------------------------
' // Write and/or read bytes from an I2C device.
' //
' // I2C bus sequence: (if write count > 0 and read count > 0)
' //      S DeviceAddr8+w A I2C_WriteBuf[0] A I2C_WriteBuf[1] A ... I2C_WriteBuf[n] A
' //      Sr DeviceAddr8+r (received_data[0]) A (received_data[1]) A ... (received_data[n]) N P
' //
' // I2C bus sequence: (if write count > 0 and read count = 0)
' //      S DeviceAddr8+w A I2C_WriteBuf[0] A I2C_WriteBuf[1] A ... I2C_WriteBuf[n] A P
' //
' // I2C bus sequence: (if write count = 0 and read count > 0)
' //      S DeviceAddr8+r (received_data[0]) A (received_data[1]) A ... (received_data[n]) N P
' //
' // On Entry:
' //   DeviceAddr8 = I2C device address, left-justified in 8 bit field
' //   I2C_nWrite = number of master-write bytes requested
' //   requested_data_count = number of master-recieve bytes requested
' //   I2C_WriteBuf[0 .. I2C_nWrite-1] = data to write
' //   pReceived_data_count = pointer to variable to hold count of number of bytes received
' //
' // On Exit:
' //   received_data[0 .. received_data_count-1] = data received
' //   *pReceived_data_count = number of bytes received
' //
' // TEST_VECTOR:OPERATOR_SET_CONDITION: Connect a MAX7320EVKIT to the USB port
' // TEST_VECTOR:HARDWARE_REQUIRED: MINIQUSB
' // TEST_VECTOR:ARGUMENT: DeviceAddr8 = 0xB0
' // TEST_VECTOR:ARGUMENT: I2C_WriteBuf SIZE 3 = 0x4D, 0x4B, 0x55
' // TEST_VECTOR:ARGUMENT: I2C_nWrite SIZEOF I2C_WriteBuf
' // TEST_VECTOR:ARGUMENT: requested_data_count = 1
' // TEST_VECTOR:ARGUMENT: received_data SIZE 5 = 12, 34, 56, 78, 90
' // TEST_VECTOR:ARGUMENT: pReceived_data_count = 0
' // TEST_VECTOR:EXPECT_RETURN: true
' // TEST_VECTOR:EXPECT_BUFFER: I2C_WriteBuf = 0x4D, 0x4B, 0x55
' // TEST_VECTOR:EXPECT_BUFFER: received_data = 0x55, 34, 56, 78, 90
' bool __stdcall DLLIMPORT CmodI2CWriteAndReadBytes (const uint8_t DeviceAddr8,
' const unsigned int I2C_nWrite, const unsigned int requested_data_count,
' const uint8_t IN I2C_WriteBuf[], uint8_t OUT received_data[], unsigned int * pReceived_data_count);
'
' argument list from C declaration:
'        const uint8_t DeviceAddr8
'        const unsigned int I2C_nWrite
'        const unsigned int requested_data_count
'        const uint8_t IN I2C_WriteBuf[]
'            C_type_root  pointer
'            PointerTo    uint8_t
'            Modifiers    ['IN']
'        uint8_t OUT received_data[]
'            C_type_root  pointer
'            PointerTo    uint8_t
'            Modifiers    ['OUT']
'        unsigned int * pReceived_data_count
'            C_type_root  pointer
'            PointerTo    int
'            Modifiers    ['unsigned']
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodI2CWriteAndReadBytes _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal DeviceAddr8 As Byte, _
        ByVal I2C_nWrite As Integer, _
        ByVal requested_data_count As Integer, _
        ByRef I2C_WriteBuf As Byte, _
        ByRef received_data As Byte, _
        ByRef pReceived_data_count As Integer _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodI2CWriteAndReadBytes_native
'-------------------------------------------------------------------------
'
' argument list from C declaration:
'        const uint8_t DeviceAddr8
'        const unsigned int I2C_nWrite
'        const unsigned int requested_data_count
'        const uint8_t IN I2C_WriteBuf[]
'            C_type_root  pointer
'            PointerTo    uint8_t
'            Modifiers    ['IN']
'        uint8_t OUT received_data[]
'            C_type_root  pointer
'            PointerTo    uint8_t
'            Modifiers    ['OUT']
'        unsigned int * pReceived_data_count
'            C_type_root  pointer
'            PointerTo    int
'            Modifiers    ['unsigned']
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodI2CWriteAndReadBytes_native _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal DeviceAddr8 As Byte, _
        ByVal I2C_nWrite As Integer, _
        ByVal requested_data_count As Integer, _
        ByRef I2C_WriteBuf As Byte, _
        ByRef received_data As Byte, _
        ByRef pReceived_data_count As Integer _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodI2CWriteAndReadBytes_portable
'-------------------------------------------------------------------------
'
' argument list from C declaration:
'        const uint8_t DeviceAddr8
'        const unsigned int I2C_nWrite
'        const unsigned int requested_data_count
'        const uint8_t IN I2C_WriteBuf[]
'            C_type_root  pointer
'            PointerTo    uint8_t
'            Modifiers    ['IN']
'        uint8_t OUT received_data[]
'            C_type_root  pointer
'            PointerTo    uint8_t
'            Modifiers    ['OUT']
'        unsigned int * pReceived_data_count
'            C_type_root  pointer
'            PointerTo    int
'            Modifiers    ['unsigned']
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodI2CWriteAndReadBytes_portable _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal DeviceAddr8 As Byte, _
        ByVal I2C_nWrite As Integer, _
        ByVal requested_data_count As Integer, _
        ByRef I2C_WriteBuf As Byte, _
        ByRef received_data As Byte, _
        ByRef pReceived_data_count As Integer _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodLogComment
'-------------------------------------------------------------------------
' // Record a comment line into the activity log (Cmod232 GUI form "Log" tab)
' //
' // On Entry:
' //      status = attempting if logging prior to performing an action
' //          status = success if reporting that action was completed
' //          status = failure if reporting that action was not completed
' //      comment = null-terminated C string containing text to report
' //
' void __stdcall DLLIMPORT CmodLogComment (int status,
' const char* IN comment );
'
' argument list from C declaration:
'        int status
'        const char* IN comment
'            C_type_root  pointer
'            PointerTo    char
'            Modifiers    ['IN']
'
Public Declare Sub CmodLogComment _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal Status As Integer, _
        ByVal comment As String _
    )

'-------------------------------------------------------------------------
' CmodLogData
'-------------------------------------------------------------------------
' // Record a data line into the activity log (Cmod232 GUI form "Log" tab)
' //
' // On Entry:
' //      status = attempting if logging prior to performing an action
' //          status = success if reporting that action was completed
' //          status = failure if reporting that action was not completed
' //      num_arg_bytes = number of data bytes to report
' //      arg_bytes[0..] = list of argument bytes to report
' //      comment = null-terminated C string containing text to report
' //
' void __stdcall DLLIMPORT CmodLogData (int status,
' unsigned int BUFSIZE num_arg_bytes, const uint8_t* const IN arg_bytes,
' const char* IN comment );
'
' argument list from C declaration:
'        int status
'        unsigned int BUFSIZE num_arg_bytes
'        const uint8_t* const IN arg_bytes
'            C_type_root  pointer
'            PointerTo    uint8_t
'            Modifiers    ['IN']
'        const char* IN comment
'            C_type_root  pointer
'            PointerTo    char
'            Modifiers    ['IN']
'
Public Declare Sub CmodLogData _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal Status As Integer, _
        ByVal num_arg_bytes As Integer, _
        ByRef arg_bytes As Byte, _
        ByVal comment As String _
    )

'-------------------------------------------------------------------------
' CmodLogFileClose
'-------------------------------------------------------------------------
' // Stop writing log entries into a file.
' //
' // On Exit:
' //      The log file is closed
' //
' bool __stdcall DLLIMPORT  CmodLogFileClose(void);
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodLogFileClose _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodLogFileOpen
'-------------------------------------------------------------------------
' // Begin writing log entries into a new text file.
' //
' // On Entry:
' //      FileName = null-terminated string containing filename to receive log entries
' //
' // On Exit:
' //      The file is opened
' //
' bool __stdcall DLLIMPORT CmodLogFileOpen(const char* IN FileName);
'
' argument list from C declaration:
'        const char* IN FileName
'            C_type_root  pointer
'            PointerTo    char
'            Modifiers    ['IN']
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodLogFileOpen _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal filename As String _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodLogFilter
'-------------------------------------------------------------------------
' // Determine which events are recorded in the log.
' //
' // On Entry:
' //      FilterString = string describing the filter settings
' //
' // FilterString syntax:
' //     Att          Log attempted operations
' //     Succ         Log successful operations
' //     Fail         Log failed operations
' //      All         Log EVERYTHING.
' //      None        Log Nothing.
' //
' bool __stdcall DLLIMPORT  CmodLogFilter(const char* IN FilterString);
'
' argument list from C declaration:
'        const char* IN FilterString
'            C_type_root  pointer
'            PointerTo    char
'            Modifiers    ['IN']
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodLogFilter _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal FilterString As String _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodP8BusConfigure
'-------------------------------------------------------------------------
' // Configure the 8-bit memory-mapped interface cycle time
' //
' // On Entry:
' //      config = requested speed descriptor
' //
' // On Exit:
' //      return value = true on success, false(0) on failure
' //
' bool __stdcall DLLIMPORT CmodP8BusConfigure(uint8_t config);
'
' argument list from C declaration:
'        uint8_t config
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodP8BusConfigure _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal config As Byte _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodP8BusRead
'-------------------------------------------------------------------------
' // Read an 8-bit parallel memory-mapped device
' //
' // On Entry:
' //      addr = 4-bit address to read
' //
' // On Exit:
' //      return value = 8-bit value read from device
' //
' uint8_t __stdcall DLLIMPORT CmodP8BusRead(uint8_t addr);
'
' argument list from C declaration:
'        uint8_t addr
'
' return type from C declaration:
'        uint8_t
'
Public Declare Function CmodP8BusRead _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal addr As Byte _
    ) _
    As Byte

'-------------------------------------------------------------------------
' CmodP8BusWrite
'-------------------------------------------------------------------------
' // Write an 8-bit parallel memory-mapped device
' //
' // On Entry:
' //      addr = 4-bit address to write
' //      data = 8-bit value to write
' //
' void __stdcall DLLIMPORT CmodP8BusWrite(uint8_t addr, uint8_t data);
'
' argument list from C declaration:
'        uint8_t addr
'        uint8_t data
'
Public Declare Sub CmodP8BusWrite _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal addr As Byte, _
        ByVal Data As Byte _
    )

'-------------------------------------------------------------------------
' CmodPinRead
'-------------------------------------------------------------------------
' // Configure a GPIO pin for input and return its logical value.
' //
' // On Entry:
' //      PinID = logical pin identifier value (not the physical pin number)
' //
' // On Exit:
' //      return value = 1 for logic high input, 0 for logic low input
' //
' int __stdcall DLLIMPORT CmodPinRead(int PinID);
'
' argument list from C declaration:
'        int PinID
'
' return type from C declaration:
'        int
'
Public Declare Function CmodPinRead _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal PinID As Integer _
    ) _
    As Integer

'-------------------------------------------------------------------------
' CmodPinWrite
'-------------------------------------------------------------------------
' // Set a GPIO pin to output a high or low logic level.
' //
' // On Entry:
' //      PinID = logical pin identifier value (not the physical pin number)
' //      value = 1 for logic high output, 0 for logic low output
' //
' void __stdcall DLLIMPORT CmodPinWrite(int PinID, int value);
'
' argument list from C declaration:
'        int PinID
'        int value
'
Public Declare Sub CmodPinWrite _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal PinID As Integer, _
        ByVal value As Integer _
    )

'-------------------------------------------------------------------------
' CmodSMBusAlertResponse
'-------------------------------------------------------------------------
' // SMBus AlertResponse reads a single data byte from a special
' // device address, which is reserved for any devices that are
' // currently pulling the SMBALERT interrupt signal low.
' //
' // I2C bus sequence:
' //      S AlertResponseAddr8+r A (normal_address8) N P
' //
' // On Exit:
' //      *DeviceAddr8Buf = device address of whatever is pulling SMBALERT low
' //      return value = true on success, false(0) on failure
' //
' // The PEC version of this function reads one additional byte,
' // containing the PEC checksum provided by the addressed slave device.
' // If the provided PEC value does not match the calculated PEC value,
' // then the return value is false.
' //
' bool __stdcall DLLIMPORT CmodSMBusAlertResponse(uint8_t* const OUT DeviceAddr8Buf);
'
' argument list from C declaration:
'        uint8_t* const OUT DeviceAddr8Buf
'            C_type_root  pointer
'            PointerTo    uint8_t
'            Modifiers    ['OUT']
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSMBusAlertResponse _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByRef DeviceAddr8Buf As Byte _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSMBusProcessCall
'-------------------------------------------------------------------------
' // SMBus ProcessCall calls a generic device function
' // (An exotic SMBus protocol, rarely used in our evaluation kits)
' //
' // I2C bus sequence:
' //      S DeviceAddr8+w A cmd A data_low A data_high A
' //      Sr DeviceAddr8+r (data_low) A (data_high) N P
' //
' //      SMBus spec transports data low-byte first, high-bit first.
' //      When viewed on an oscilloscope, the data bits appear in the order:
' //      D7 D6 D5 D4 D3 D2 D1 D0 (ack) D15 D14 D13 D12 D11 D10 D9 D8 (ack)
' //
' // On Entry:
' //      DeviceAddr8 = address of device sending the message,
' //          left-justified with LSB (r/w) ignored
' //      cmd = device-specific command byte
' //      data = command-specific 16-bit value
' //      buf = pointer to a 16-bit buffer
' //
' // On Exit:
' //      *buf = received data value
' //      return value = true on success, false(0) on failure
' //
' // The PEC version of this function reads one additional byte,
' // containing the PEC checksum provided by the addressed slave device.
' // If the provided PEC value does not match the calculated PEC value,
' // then the return value is false.
' //
' // TEST_VECTOR:COMMENT: test vectors
' // TEST_VECTOR:HARDWARE_REQUIRED: MINIQUSB
' // TEST_VECTOR:ARGUMENT: DeviceAddr8 = 0xB0
' // TEST_VECTOR:ARGUMENT: cmd = 0x4D
' // TEST_VECTOR:ARGUMENT: data = 0xBEEF
' // TEST_VECTOR:ARGUMENT: buf SIZE 2 = 0xAA, 0x55
' // TEST_VECTOR:EXPECT_RETURN: true
' bool __stdcall DLLIMPORT CmodSMBusProcessCall(const uint8_t DeviceAddr8,
' const uint8_t cmd,
' const uint16_t data, uint16_t* const OUT buf);
'
' argument list from C declaration:
'        const uint8_t DeviceAddr8
'        const uint8_t cmd
'        const uint16_t data
'        uint16_t* const OUT buf
'            C_type_root  pointer
'            PointerTo    uint16_t
'            Modifiers    ['OUT']
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSMBusProcessCall _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal DeviceAddr8 As Byte, _
        ByVal cmd As Byte, _
        ByVal Data As Integer, _
        ByRef buf As Integer _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSMBusQuick
'-------------------------------------------------------------------------
' // SMBus Quick protocol tests whether a device acknowledges its address
' //
' // I2C bus sequence:
' //      S DeviceAddr8+w A P
' //      S DeviceAddr8+r A (dummy_read) N P
' //
' // On Entry:
' //      DeviceAddr8 = device address, left-justified with LSB=(r/w)
' //
' // On Exit:
' //      return value = true on success, false(0) on failure
' //
' // TEST_VECTOR:OPERATOR_SET_CONDITION: Connect a MAX7319EVKIT to the USB port
' // TEST_VECTOR:HARDWARE_REQUIRED: MINIQUSB
' // TEST_VECTOR:ARGUMENT: DeviceAddr8 = 0xD0
' // TEST_VECTOR:EXPECT_RETURN: true
' bool __stdcall DLLIMPORT CmodSMBusQuick(const uint8_t DeviceAddr8);
'
' argument list from C declaration:
'        const uint8_t DeviceAddr8
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSMBusQuick _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal DeviceAddr8 As Byte _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSMBusQuick_native
'-------------------------------------------------------------------------
'
' argument list from C declaration:
'        const uint8_t DeviceAddr8
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSMBusQuick_native _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal DeviceAddr8 As Byte _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSMBusQuick_portable
'-------------------------------------------------------------------------
'
' argument list from C declaration:
'        const uint8_t DeviceAddr8
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSMBusQuick_portable _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal DeviceAddr8 As Byte _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSMBusReadBlock
'-------------------------------------------------------------------------
' // SMBus ReadBlock reads a variable-length counted string from a device
' //
' // Not to be confused with Cmod2WireReadBlock,
' // which simply receives a sequence of raw bytes.
' //
' // SMBus ReadBlock uses the first received byte as the string length.
' //
' // I2C bus sequence:
' //      S DeviceAddr8+w A cmd A Sr DeviceAddr8+r (count) A
' //          (databuf[0]) A (databuf[1]) A ... (databuf[n]) N P
' //
' // On Entry:
' //      DeviceAddr8 = device address, left-justified with LSB (r/w) ignored
' //      cmd = device-specific command byte
' //      countptr = pointer to an 8-bit buffer
' //      databuf = address of buffer to hold received data
' //      bufsize = size of databuf buffer
' //
' // On Exit:
' //      *countptr = number of valid bytes in databuf[]
' //      databuf[0..] contains the data read from the device
' //      return value = true on success, false(0) on failure
' //
' // The PEC version of this function reads one additional byte,
' // containing the PEC checksum provided by the addressed slave device.
' // If the provided PEC value does not match the calculated PEC value,
' // then the return value is false.
' //
' bool __stdcall DLLIMPORT CmodSMBusReadBlock(const uint8_t DeviceAddr8,
' const uint8_t cmd,
' uint8_t* OUT countptr,
' uint8_t OUT databuf[], const unsigned int bufsize);
'
' argument list from C declaration:
'        const uint8_t DeviceAddr8
'        const uint8_t cmd
'        uint8_t* OUT countptr
'            C_type_root  pointer
'            PointerTo    uint8_t
'            Modifiers    ['OUT']
'        uint8_t OUT databuf[]
'            C_type_root  pointer
'            PointerTo    uint8_t
'            Modifiers    ['OUT']
'        const unsigned int bufsize
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSMBusReadBlock _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal DeviceAddr8 As Byte, _
        ByVal cmd As Byte, _
        ByRef countptr As Byte, _
        ByRef databuf As Byte, _
        ByVal bufsize As Integer _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSMBusReadByte
'-------------------------------------------------------------------------
' // SMBus ReadByte calls a device function returning an 8 bit result
' //
' // I2C bus sequence:
' //      S DeviceAddr8+w A cmd A Sr DeviceAddr8+r (data) N P
' //
' // On Entry:
' //      DeviceAddr8 = device address, left-justified with LSB (r/w) ignored
' //      cmd = device-specific command byte
' //      databuf = pointer to an 8-bit buffer
' //
' // On Exit:
' //      *databuf = received data value
' //      return value = true on success, false(0) on failure
' //
' // The PEC version of this function reads one additional byte,
' // containing the PEC checksum provided by the addressed slave device.
' // If the provided PEC value does not match the calculated PEC value,
' // then the return value is false.
' //
' bool __stdcall DLLIMPORT CmodSMBusReadByte(const uint8_t DeviceAddr8,
' const uint8_t cmd, uint8_t* const OUT databuf);
'
' argument list from C declaration:
'        const uint8_t DeviceAddr8
'        const uint8_t cmd
'        uint8_t* const OUT databuf
'            C_type_root  pointer
'            PointerTo    uint8_t
'            Modifiers    ['OUT']
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSMBusReadByte _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal DeviceAddr8 As Byte, _
        ByVal cmd As Byte, _
        ByRef databuf As Byte _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSMBusReadWord
'-------------------------------------------------------------------------
' // SMBus ReadWord calls a device function returning a 16 bit result
' //
' // I2C bus sequence:
' //      S DeviceAddr8+w A cmd A Sr DeviceAddr8+r (data_low) A (data_high) N P
' //
' // On Entry:
' //      DeviceAddr8 = device address, left-justified with LSB (r/w) ignored
' //      cmd = device-specific command byte
' //      buf = pointer to a 16-bit buffer
' //
' // On Exit:
' //      *buf = received data value
' //      return value = true on success, false(0) on failure
' //
' // The PEC version of this function reads one additional byte,
' // containing the PEC checksum provided by the addressed slave device.
' // If the provided PEC value does not match the calculated PEC value,
' // then the return value is false.
' //
' bool __stdcall DLLIMPORT CmodSMBusReadWord(const uint8_t DeviceAddr8,
' const uint8_t cmd, uint16_t* const OUT buf);
'
' argument list from C declaration:
'        const uint8_t DeviceAddr8
'        const uint8_t cmd
'        uint16_t* const OUT buf
'            C_type_root  pointer
'            PointerTo    uint16_t
'            Modifiers    ['OUT']
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSMBusReadWord _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal DeviceAddr8 As Byte, _
        ByVal cmd As Byte, _
        ByRef buf As Integer _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSMBusReceiveByte
'-------------------------------------------------------------------------
' // SMBus ReceiveByte reads a single data byte (typically status)
' //
' // I2C bus sequence:
' //      S DeviceAddr8+r A (data) N P
' //
' // On Entry:
' //      DeviceAddr8 = device address, left-justified with LSB (r/w) ignored
' //
' // On Exit:
' //      *databuf = received data
' //      return value = true on success, false(0) on failure
' //
' // The PEC version of this function reads one additional byte,
' // containing the PEC checksum provided by the addressed slave device.
' // If the provided PEC value does not match the calculated PEC value,
' // then the return value is false.
' //
' // TEST_VECTOR:OPERATOR_SET_CONDITION: Connect a MAX7319EVKIT to the USB port, and hold SW0 and SW7.
' // TEST_VECTOR:HARDWARE_REQUIRED: MINIQUSB
' // TEST_VECTOR:ARGUMENT: DeviceAddr8 = 0xD0
' // TEST_VECTOR:ARGUMENT: databuf SIZE 1 = 0x4D
' // TEST_VECTOR:EXPECT_RETURN: true
' // TEST_VECTOR:EXPECT_BUFFER: databuf = 0x7E
' bool __stdcall DLLIMPORT CmodSMBusReceiveByte(const uint8_t DeviceAddr8,
' uint8_t* const OUT databuf);
'
' argument list from C declaration:
'        const uint8_t DeviceAddr8
'        uint8_t* const OUT databuf
'            C_type_root  pointer
'            PointerTo    uint8_t
'            Modifiers    ['OUT']
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSMBusReceiveByte _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal DeviceAddr8 As Byte, _
        ByRef databuf As Byte _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSMBusSendByte
'-------------------------------------------------------------------------
' // SMBus SendByte writes a single command byte to the device
' //
' // I2C bus sequence:
' //      S DeviceAddr8+w A cmd A P
' //
' // On Entry:
' //      DeviceAddr8 = device address, left-justified with LSB (r/w) ignored
' //      cmd = device-specific command byte
' //
' // On Exit:
' //      return value = true on success, false(0) on failure
' //
' // The PEC version of this function sends one additional byte,
' // containing the calculated PEC checksum. If the slave device
' // calculates a different PEC checksum value, then the slave
' // may choose to reject the packet as invalid.
' //
' bool __stdcall DLLIMPORT CmodSMBusSendByte(const uint8_t DeviceAddr8, const uint8_t cmd);
'
' argument list from C declaration:
'        const uint8_t DeviceAddr8
'        const uint8_t cmd
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSMBusSendByte _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal DeviceAddr8 As Byte, _
        ByVal cmd As Byte _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSMBusSendByte_native
'-------------------------------------------------------------------------
'
' argument list from C declaration:
'        const uint8_t DeviceAddr8
'        const uint8_t cmd
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSMBusSendByte_native _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal DeviceAddr8 As Byte, _
        ByVal cmd As Byte _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSMBusSendByte_portable
'-------------------------------------------------------------------------
'
' argument list from C declaration:
'        const uint8_t DeviceAddr8
'        const uint8_t cmd
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSMBusSendByte_portable _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal DeviceAddr8 As Byte, _
        ByVal cmd As Byte _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSMBusWriteBlock
'-------------------------------------------------------------------------
' // SMBus WriteBlock writes a variable-length counted string to a device
' //
' // Not to be confused with Cmod2WireWriteBlock,
' // which simply writes a sequence of raw bytes.
' //
' // I2C bus sequence:
' //      S DeviceAddr8+w A cmd A length A databuf[0] A databuf[1] A ... databuf[n] A P
' //
' // On Entry:
' //      DeviceAddr8 = device address, left-justified with LSB (r/w) ignored
' //      cmd = device-specific command byte
' //      databuf = address of string to be written
' //      count = number of valid bytes in databuf[]
' //
' // On Exit:
' //      return value = true on success, false(0) on failure
' //
' // The PEC version of this function sends one additional byte,
' // containing the calculated PEC checksum. If the slave device
' // calculates a different PEC checksum value, then the slave
' // may choose to reject the packet as invalid.
' //
' bool __stdcall DLLIMPORT CmodSMBusWriteBlock(const uint8_t DeviceAddr8,
' const uint8_t cmd,
' const unsigned int count, const uint8_t IN databuf[]);
'
' argument list from C declaration:
'        const uint8_t DeviceAddr8
'        const uint8_t cmd
'        const unsigned int count
'        const uint8_t IN databuf[]
'            C_type_root  pointer
'            PointerTo    uint8_t
'            Modifiers    ['IN']
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSMBusWriteBlock _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal DeviceAddr8 As Byte, _
        ByVal cmd As Byte, _
        ByVal count As Integer, _
        ByRef databuf As Byte _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSMBusWriteBlock_native
'-------------------------------------------------------------------------
'
' argument list from C declaration:
'        const uint8_t DeviceAddr8
'        const uint8_t cmd
'        const unsigned int count
'        const uint8_t IN databuf[]
'            C_type_root  pointer
'            PointerTo    uint8_t
'            Modifiers    ['IN']
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSMBusWriteBlock_native _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal DeviceAddr8 As Byte, _
        ByVal cmd As Byte, _
        ByVal count As Integer, _
        ByRef databuf As Byte _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSMBusWriteBlock_portable
'-------------------------------------------------------------------------
'
' argument list from C declaration:
'        const uint8_t DeviceAddr8
'        const uint8_t cmd
'        const unsigned int count
'        const uint8_t IN databuf[]
'            C_type_root  pointer
'            PointerTo    uint8_t
'            Modifiers    ['IN']
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSMBusWriteBlock_portable _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal DeviceAddr8 As Byte, _
        ByVal cmd As Byte, _
        ByVal count As Integer, _
        ByRef databuf As Byte _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSMBusWriteByte
'-------------------------------------------------------------------------
' // SMBus WriteByte writes a command with an 8 bit argument
' //
' // I2C bus sequence:
' //      S DeviceAddr8+w A cmd A data A P
' //
' // On Entry:
' //      DeviceAddr8 = device address, left-justified with LSB (r/w) ignored
' //      cmd = device-specific command byte
' //      data = command-specific byte value
' //
' // On Exit:
' //      return value = true on success, false(0) on failure
' //
' // The PEC version of this function sends one additional byte,
' // containing the calculated PEC checksum. If the slave device
' // calculates a different PEC checksum value, then the slave
' // may choose to reject the packet as invalid.
' //
' bool __stdcall DLLIMPORT CmodSMBusWriteByte(const uint8_t DeviceAddr8,
' const uint8_t cmd, const uint8_t data);
'
' argument list from C declaration:
'        const uint8_t DeviceAddr8
'        const uint8_t cmd
'        const uint8_t data
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSMBusWriteByte _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal DeviceAddr8 As Byte, _
        ByVal cmd As Byte, _
        ByVal Data As Byte _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSMBusWriteByte_native
'-------------------------------------------------------------------------
'
' argument list from C declaration:
'        const uint8_t DeviceAddr8
'        const uint8_t cmd
'        const uint8_t data
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSMBusWriteByte_native _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal DeviceAddr8 As Byte, _
        ByVal cmd As Byte, _
        ByVal Data As Byte _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSMBusWriteByte_portable
'-------------------------------------------------------------------------
'
' argument list from C declaration:
'        const uint8_t DeviceAddr8
'        const uint8_t cmd
'        const uint8_t data
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSMBusWriteByte_portable _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal DeviceAddr8 As Byte, _
        ByVal cmd As Byte, _
        ByVal Data As Byte _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSMBusWriteToHost
'-------------------------------------------------------------------------
' // SMBus WriteToHost writes a 16 bit message to the host
' // (An exotic SMBus protocol, rarely used in our evaluation kits)
' //
' // I2C bus sequence:
' //      S HostAddr8+w A DeviceAddr8+w A data_low A data_high A P
' //
' //      SMBus spec transports data low-byte first, high-bit first.
' //      When viewed on an oscilloscope, the data bits appear in the order:
' //      D7 D6 D5 D4 D3 D2 D1 D0 (ack) D15 D14 D13 D12 D11 D10 D9 D8 (ack)
' //
' // On Entry:
' //      DeviceAddr8 = address of device sending the message,
' //          left-justified with LSB (r/w) ignored
' //      data = device-specific 16-bit value
' //
' // On Exit:
' //      return value = true on success, false(0) on failure
' //
' // The PEC version of this function sends one additional byte,
' // containing the calculated PEC checksum. If the slave device
' // calculates a different PEC checksum value, then the slave
' // may choose to reject the packet as invalid.
' //
' bool __stdcall DLLIMPORT CmodSMBusWriteToHost(const uint8_t DeviceAddr8, const uint16_t data);
'
' argument list from C declaration:
'        const uint8_t DeviceAddr8
'        const uint16_t data
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSMBusWriteToHost _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal DeviceAddr8 As Byte, _
        ByVal Data As Integer _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSMBusWriteWord
'-------------------------------------------------------------------------
' // SMBus WriteWord writes a command with a 16 bit argument
' //
' // I2C bus sequence:
' //      S DeviceAddr8+w A cmd A data_low A data_high A P
' //
' //      SMBus spec transports data low-byte first, high-bit first.
' //      When viewed on an oscilloscope, the data bits appear in the order:
' //      D7 D6 D5 D4 D3 D2 D1 D0 (ack) D15 D14 D13 D12 D11 D10 D9 D8 (ack)
' //
' // On Entry:
' //      DeviceAddr8 = device address, left-justified with LSB (r/w) ignored
' //      cmd = device-specific command byte
' //      data = command-specific 16-bit value
' //
' // On Exit:
' //      return value = true on success, false(0) on failure
' //
' // The PEC version of this function sends one additional byte,
' // containing the calculated PEC checksum. If the slave device
' // calculates a different PEC checksum value, then the slave
' // may choose to reject the packet as invalid.
' //
' bool __stdcall DLLIMPORT CmodSMBusWriteWord(const uint8_t DeviceAddr8,
' const uint8_t cmd, const uint16_t data);
'
' argument list from C declaration:
'        const uint8_t DeviceAddr8
'        const uint8_t cmd
'        const uint16_t data
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSMBusWriteWord _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal DeviceAddr8 As Byte, _
        ByVal cmd As Byte, _
        ByVal Data As Integer _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSMBusWriteWord_native
'-------------------------------------------------------------------------
'
' argument list from C declaration:
'        const uint8_t DeviceAddr8
'        const uint8_t cmd
'        const uint16_t data
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSMBusWriteWord_native _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal DeviceAddr8 As Byte, _
        ByVal cmd As Byte, _
        ByVal Data As Integer _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSMBusWriteWord_portable
'-------------------------------------------------------------------------
'
' argument list from C declaration:
'        const uint8_t DeviceAddr8
'        const uint8_t cmd
'        const uint16_t data
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSMBusWriteWord_portable _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal DeviceAddr8 As Byte, _
        ByVal cmd As Byte, _
        ByVal Data As Integer _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodScriptExecEx
'-------------------------------------------------------------------------
' // Execute a previously stored sequence of commands.
' //
' // DEPRECATED. Do not expect this function to be implemented in the future.
' //
' bool __stdcall DLLIMPORT CmodScriptExecEx(const uint8_t ScriptOffset, const uint8_t RepeatCount, const uint8_t flags);
'
' argument list from C declaration:
'        const uint8_t ScriptOffset
'        const uint8_t RepeatCount
'        const uint8_t flags
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodScriptExecEx _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal ScriptOffset As Byte, _
        ByVal RepeatCount As Byte, _
        ByVal flags As Byte _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSpiByte
'-------------------------------------------------------------------------
' // Transfer one byte of data over the SPI interface.
' //
' // The SPI simultaneously transmits and receives data,
' // one byte at a time.
' //
' // This function is DEPRECATED because it cannot indicate whether or not
' // the operation succeeded. Use CmodSpiTransfer instead.
' //
' // On Entry:
' //      mosi = data byte to write into slave device
' //
' // On Exit:
' //      return value = data byte received from slave device
' //
' uint8_t __stdcall DLLIMPORT CmodSpiByte(uint8_t mosi);
'
' argument list from C declaration:
'        uint8_t mosi
'
' return type from C declaration:
'        uint8_t
'
Public Declare Function CmodSpiByte _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal mosi As Byte _
    ) _
    As Byte

'-------------------------------------------------------------------------
' CmodSpiConfigCSPin
'-------------------------------------------------------------------------
' // Configure the logical GPIO pin to use as SPI chip-select pin.
' //
' // On Entry:
' //      SPI_cs_pin = pin identifier (see to CmodPin___ functions)
' //
' // On Exit:
' //      return value = true on success, false(0) on failure
' //
' bool __stdcall DLLIMPORT CmodSpiConfigCSPin(int SPI_cs_pin);
'
' argument list from C declaration:
'        int SPI_cs_pin
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSpiConfigCSPin _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal SPI_cs_pin As Integer _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSpiConfigCSPinActiveHigh
'-------------------------------------------------------------------------
' // Configure the SPI chip-select pin to be active-low or active-high.
' //
' // On Entry:
' //      SPI_cs_pin_active_high = true to use active-high chip select.
' //
' // On Exit:
' //      return value = true on success, false(0) on failure
' //
' bool __stdcall DLLIMPORT CmodSpiConfigCSPinActiveHigh(bool SPI_cs_pin_active_high);
'
' argument list from C declaration:
'        bool SPI_cs_pin_active_high
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSpiConfigCSPinActiveHigh _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal SPI_cs_pin_active_high As Boolean _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSpiConfigCpolCpha
'-------------------------------------------------------------------------
' // Configure the SPI (CPOL,CPHA) clock polarity/phase parameters
' //
' // On Entry:
' //      SPI_cpol = 0 means clock idles low, 1 means clock idles high
' //      SPI_cpha = 0 for data stable on first clock edge, 1 for second edge.
' //
' //      The most common mode is (CPOL=0, CPHA=0).
' //
' //      When CPOL is set to the same value as CPHA,
' //      data is valid on the rising edge of the clock.
' //
' //      When CPOL is set to the opposite value as CPHA,
' //      data is valid on the falling edge of the clock.
' //
' // On Exit:
' //      return value = true on success, false(0) on failure
' //
' bool __stdcall DLLIMPORT CmodSpiConfigCpolCpha(int SPI_cpol, int SPI_cpha);
'
' argument list from C declaration:
'        int SPI_cpol
'        int SPI_cpha
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSpiConfigCpolCpha _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal SPI_cpol As Integer, _
        ByVal SPI_cpha As Integer _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSpiConfigMISOPin
'-------------------------------------------------------------------------
' // Configure the logical GPIO pin to use as SPI master-in data pin.
' //
' // On Entry:
' //      SPI_miso_data_pin = pin identifier (see to CmodPin___ functions)
' //
' // On Exit:
' //      return value = true on success, false(0) on failure
' //
' bool __stdcall DLLIMPORT CmodSpiConfigMISOPin(int SPI_miso_data_pin);
'
' argument list from C declaration:
'        int SPI_miso_data_pin
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSpiConfigMISOPin _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal SPI_miso_data_pin As Integer _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSpiConfigMOSIPin
'-------------------------------------------------------------------------
' // Configure the logical GPIO pin to use as SPI master-out data pin.
' //
' // On Entry:
' //      SPI_mosi_data_pin = pin identifier (see to CmodPin___ functions)
' //
' // On Exit:
' //      return value = true on success, false(0) on failure
' //
' bool __stdcall DLLIMPORT CmodSpiConfigMOSIPin(int SPI_mosi_data_pin);
'
' argument list from C declaration:
'        int SPI_mosi_data_pin
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSpiConfigMOSIPin _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal SPI_mosi_data_pin As Integer _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSpiConfigMSBFirst
'-------------------------------------------------------------------------
' // Configure the SPI data to be transmitted MSB-first.
' //
' // On Entry:
' //      SPI_msb_first = true to transmit and receive most-significant bit first.
' //
' // On Exit:
' //      return value = true on success, false(0) on failure
' //
' bool __stdcall DLLIMPORT CmodSpiConfigMSBFirst(bool SPI_msb_first);
'
' argument list from C declaration:
'        bool SPI_msb_first
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSpiConfigMSBFirst _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal SPI_msb_first As Boolean _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSpiConfigSCKPin
'-------------------------------------------------------------------------
' // Configure the logical GPIO pin to use as SPI clock pin.
' //
' // On Entry:
' //      SPI_clock_pin = pin identifier (see to CmodPin___ functions)
' //
' // On Exit:
' //      return value = true on success, false(0) on failure
' //
' bool __stdcall DLLIMPORT CmodSpiConfigSCKPin(int SPI_clock_pin);
'
' argument list from C declaration:
'        int SPI_clock_pin
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSpiConfigSCKPin _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal SPI_clock_pin As Integer _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSpiConfigSCKSpeedKhz
'-------------------------------------------------------------------------
' // Configure the SPI clock speed.
' //
' // On Entry:
' //      SPI_speed_khz = requested SPI clock speed in KHz.
' //
' // On Exit:
' //      return value = true on success, false(0) on failure
' //
' bool __stdcall DLLIMPORT CmodSpiConfigSCKSpeedKhz(int SPI_speed_khz);
'
' argument list from C declaration:
'        int SPI_speed_khz
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSpiConfigSCKSpeedKhz _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal SPI_speed_khz As Integer _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSpiCsAssert
'-------------------------------------------------------------------------
' // Assert the previously configured SPI chip-select TRUE.
' //
' // On Exit:
' //      return value = true on success, false(0) on failure
' //
' bool __stdcall DLLIMPORT CmodSpiCsAssert(void);
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSpiCsAssert _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSpiCsNegate
'-------------------------------------------------------------------------
' // Negate the previously configured SPI chip-select FALSE.
' //
' // On Exit:
' //      return value = true on success, false(0) on failure
' //
' bool __stdcall DLLIMPORT CmodSpiCsNegate(void);
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSpiCsNegate _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSpiTransfer
'-------------------------------------------------------------------------
' // Transfer a sequence of bytes over the SPI interface.
' //
' // The SPI simultaneously transmits and receives data,
' // one byte at a time.
' //
' // On Entry:
' //      byte_count = number of bytes to transfer
' //          (This is currently limited to 512 bytes)
' //      mosi[] = buffer of data bytes to write into slave device
' //      miso_buf[] = buffer to hold received data bytes
' //
' //      global gSPI_AutoCS = 0; // CS = controlled by GPIO-K9 (normal, compatible operation)
' //      global gSPI_AutoCS = 1; // CS = CMOD_spiConfig_AutoCS_1Byte (if supported by firmware)
' //      global gSPI_AutoCS = 2; // CS = CMOD_spiConfig_AutoCS_2Bytes (if supported by firmware)
' //      global gSPI_AutoCS = 3; // CS = CMOD_spiConfig_AutoCS_3Bytes (if supported by firmware)
' //      global gSPI_AutoCS = 4; // CS = CMOD_spiConfig_AutoCS_4Bytes (if supported by firmware)
' //
' //      global gSPI_AutoCS_FillByte = data to fill if mosi[] buffer is too short
' //      For example mosi[7] and gSPI_AutoCS=3:
' //          CMOD_spiTransfer mosi[0] mosi[1] mosi[2]
' //          CMOD_spiTransfer mosi[3] mosi[4] mosi[5]
' //          CMOD_spiTransfer mosi[6] gSPI_AutoCS_FillByte gSPI_AutoCS_FillByte
' //
' // On Exit:
' //      miso_buf[] contains data bytes received from slave device
' //      return value = true on success, false(0) on failure
' //
' // TEST_VECTOR:OPERATOR_SET_CONDITION: Connect CMAXQUSB and jumper its MISO to MOSI
' // TEST_VECTOR:HARDWARE_REQUIRED: CMAXQUSB
' // TEST_VECTOR:ARGUMENT: mosi SIZE 3 = 0x4D, 0x4B, 0x55
' // TEST_VECTOR:ARGUMENT: byte_count SIZEOF mosi
' // TEST_VECTOR:ARGUMENT: miso_buf SIZE 3 = 12, 34, 56
' // TEST_VECTOR:EXPECT_RETURN: true
' // TEST_VECTOR:EXPECT_BUFFER: mosi = 0x4D, 0x4B, 0x55
' // TEST_VECTOR:EXPECT_BUFFER: miso_buf = 0x4D, 0x4B, 0x55
' bool __stdcall DLLIMPORT CmodSpiTransfer(unsigned int BUFSIZE byte_count,
' const uint8_t IN mosi[], uint8_t OUT miso_buf[]);
'
' argument list from C declaration:
'        unsigned int BUFSIZE byte_count
'        const uint8_t IN mosi[]
'            C_type_root  pointer
'            PointerTo    uint8_t
'            Modifiers    ['IN']
'        uint8_t OUT miso_buf[]
'            C_type_root  pointer
'            PointerTo    uint8_t
'            Modifiers    ['OUT']
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSpiTransfer _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal byte_count As Integer, _
        ByRef mosi As Byte, _
        ByRef miso_buf As Byte _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CmodSupportsNativeSMBusCommands
'-------------------------------------------------------------------------
' // New in MINIQUSB, firmware 01.05.37 and later:
' // Improved, optimized commands that buffer an entire payload of data,
' // before issuing the start/stop conditions.
' //
' // Call CmodSupportsNativeSMBusCommands() to detect
' // whether the attached firmware supports these optimized commands.
' // If supported, the native commands are then enabled by default.
' //
' // CmodSMBusXXXXX_portable = function using original CMOD232-compatible command codes
' // CmodSMBusXXXXX_native = function using new, optimized command codes under the new firmware
' //
' extern uint16_t nCmodNativeSMBusCommandsBitmask;
' extern bool bCmodSupportsNativeSMBusCommands;
' extern bool bCmodUseNativeSMBusCommands;
' bool __stdcall DLLIMPORT CmodSupportsNativeSMBusCommands(void);
'
' return type from C declaration:
'        bool
'
Public Declare Function CmodSupportsNativeSMBusCommands _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CommDebugLogFile_Close
'-------------------------------------------------------------------------
' // Ends writing the debug diagnostics log file.
' //
' // TEST_VECTOR:COMMENT: hardware not required
' // TEST_VECTOR:EXPECT_RETURN:
' void  __stdcall DLLIMPORT  CommDebugLogFile_Close(void);
'
Public Declare Sub CommDebugLogFile_Close _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
    )

'-------------------------------------------------------------------------
' CommDebugLogFile_IsOpen
'-------------------------------------------------------------------------
' // Verifies whether the debug diagnostics data log file is open.
' //
' // On Exit:
' //      Return value = true if debug diagnostics log file is open.
' //
' // TEST_VECTOR:COMMENT: hardware not required
' // TEST_VECTOR:EXPECT_RETURN: false
' bool  __stdcall DLLIMPORT  CommDebugLogFile_IsOpen(void);
'
' return type from C declaration:
'        bool
'
Public Declare Function CommDebugLogFile_IsOpen _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CommDebugLogFile_Open
'-------------------------------------------------------------------------
' // Begin writing debug diagnostics data log to specified output file.
' // If the file does not exist, it will be created.
' // If the file already exists, it will be appended in text mode.
' //
' // On Entry:
' //      filename = name of file to write.
' //
' // TEST_VECTOR:COMMENT: create or append file "DebugLogFile.txt"
' // TEST_VECTOR:ARGUMENT: filename = "DebugLogFile.txt"
' // TEST_VECTOR:EXPECT_RETURN:
' void  __stdcall DLLIMPORT  CommDebugLogFile_Open(const char* filename);
'
' argument list from C declaration:
'        const char* filename
'            C_type_root  pointer
'            PointerTo    char
'            Modifiers    []
'
Public Declare Sub CommDebugLogFile_Open _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal filename As String _
    )

'-------------------------------------------------------------------------
' CommLogListingFile_Close
'-------------------------------------------------------------------------
' // Ends writing the communications data log file.
' //
' // TEST_VECTOR:COMMENT: hardware not required
' // TEST_VECTOR:EXPECT_RETURN:
' void __stdcall DLLIMPORT CommLogListingFile_Close(void);
'
Public Declare Sub CommLogListingFile_Close _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
    )

'-------------------------------------------------------------------------
' CommLogListingFile_IsOpen
'-------------------------------------------------------------------------
' // Verifies whether the communications data log file is open.
' //
' // On Exit:
' //      Return value = true if communications log file is open.
' //
' // TEST_VECTOR:COMMENT: hardware not required
' // TEST_VECTOR:EXPECT_RETURN: false
' bool __stdcall DLLIMPORT CommLogListingFile_IsOpen(void);
'
' return type from C declaration:
'        bool
'
Public Declare Function CommLogListingFile_IsOpen _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
    ) _
    As Boolean

'-------------------------------------------------------------------------
' CommLogListingFile_Open
'-------------------------------------------------------------------------
' // Begin writing communications data log to specified output file.
' // If the file does not exist, it will be created.
' // If the file already exists, it will be appended in text mode.
' //
' // On Entry:
' //      filename = name of file to write.
' //
' // TEST_VECTOR:COMMENT: create or append file "Log_CmodComm_Example.txt"
' // TEST_VECTOR:ARGUMENT: filename = "Log_CmodComm_Example.txt"
' // TEST_VECTOR:EXPECT_RETURN:
' void __stdcall DLLIMPORT CommLogListingFile_Open(const char* filename);
'
' argument list from C declaration:
'        const char* filename
'            C_type_root  pointer
'            PointerTo    char
'            Modifiers    []
'
Public Declare Sub CommLogListingFile_Open _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByVal filename As String _
    )

'-------------------------------------------------------------------------
' PEC_crc8
'-------------------------------------------------------------------------
' // SMBus PEC (Packet Error Correction)
' //
' // The Packet Error Correction is a crc-8 polynomial x^8 + x^2 + x^1 + 1,
' // calculated in the order of the bits as received. The PEC does not include
' // ACK, NACK, START, STOP, nor Repeated START bits. PEC is computed over the
' // entire message, from the first START condition. So the device address is
' // always the first byte included in the PEC.
' //
' // Data may be tested online using the applet at
' //    http://www.smbus.org/faq/crc8Applet.htm
' //
' // On Entry:
' //      message[] = array of bytes
' //      nBytes = number of valid bytes in message[]
' //      initial_remainder = initial CRC-8 remainder.
' //          Use 0 for the initial remainder after the first START condition.
' //          Use the previous return value to continue PEC calculation.
' //
' // On Exit:
' //      return value = final CRC-8 remainder
' //
' // TEST_VECTOR:COMMENT: verify with applet at http://www.smbus.org/faq/crc8Applet.htm
' // TEST_VECTOR:ARGUMENT: message SIZE 4 = 0x12, 0x34, 0x56, 0x78
' // TEST_VECTOR:ARGUMENT: nBytes SIZEOF message
' // TEST_VECTOR:ARGUMENT: initial_remainder = 0
' // TEST_VECTOR:EXPECT_RETURN: 0x1c
' #ifdef __cplusplus
' // C++ allows default argument specification initial_remainder = 0
' uint8_t __stdcall DLLIMPORT PEC_crc8(
' uint8_t const message[], const unsigned int nBytes,
' const uint8_t initial_remainder = 0);
' #else /* __cplusplus */
' uint8_t __stdcall DLLIMPORT PEC_crc8(
' uint8_t const message[], const unsigned int nBytes,
' const uint8_t initial_remainder);
'
' argument list from C declaration:
'        uint8_t const message[]
'            C_type_root  pointer
'            PointerTo    uint8_t
'            Modifiers    []
'        const unsigned int nBytes
'        const uint8_t initial_remainder
'
' return type from C declaration:
'        uint8_t
'
Public Declare Function PEC_crc8 _
    Lib "C:\Program Files\Maxim_CMODSDK_6_C_User\Dll_NoGui\cmodcomm.dll" _
    ( _
        ByRef Message As Byte, _
        ByVal nBytes As Integer, _
        ByVal initial_remainder As Byte _
    ) _
    As Byte

'//===========================================================
'// Epilogue
'//===========================================================
' Module constants
Const CMODCOMM_REVISION = &H10162       ' source: CmodComm.h(21)        0x00010162
Const CMOD_FAILURE = (&HFA)     ' source: CmodComm.h(1648)      ((uint8_t)0xFA)
Const CMOD_GPIOget_Kx = (&HE0)  ' source: CmodComm.h(1692)      ((uint8_t)0xE0)
Const CMOD_GPIOset_Kx = (&HF0)  ' source: CmodComm.h(1689)      ((uint8_t)0xF0)
Const CMOD_getFirmwareVersion = (&HC2)  ' source: CmodComm.h(1726)      ((uint8_t)0xC2)
Const CMOD_getFirmwareVersion_majorMinor = (&H0)        ' source: CmodComm.h(1727)      ((uint8_t)0x00)
Const CMOD_getFirmwareVersion_majorMinorBuild = (&H1)   ' source: CmodComm.h(1728)      ((uint8_t)0x01)
Const CMOD_getFirmwareVersion_szCPU = (&H2)     ' source: CmodComm.h(1729)      ((uint8_t)0x02)
Const CMOD_getFirmwareVersion_szMHZ = (&H3)     ' source: CmodComm.h(1730)      ((uint8_t)0x03)
Const CMOD_i2cBlockRead_xN = (&H90)     ' source: CmodComm.h(1687)      ((uint8_t)0x90)
Const CMOD_i2cBlockWrite_xN = (&H80)    ' source: CmodComm.h(1685)      ((uint8_t)0x80)
Const CMOD_i2cPulseScl9x_0 = (&HA4)     ' source: CmodComm.h(1671)      ((uint8_t)0xA4)
Const CMOD_i2cRead_AckNack = (&HA2)     ' source: CmodComm.h(1665)      ((uint8_t)0xA2)
Const CMOD_i2cSet_BlockAddr = (&HA5)    ' source: CmodComm.h(1675)      ((uint8_t)0xA5)
Const CMOD_i2cSpeed = (&HA6)    ' source: CmodComm.h(1678)      ((uint8_t)0xA6)
Const CMOD_i2cStart = (&HA0)    ' source: CmodComm.h(1646)      ((uint8_t)0xA0)
Const CMOD_i2cStart_QueryCapabilities = (&H2)   ' source: CmodComm.h(1652)      ((uint8_t)0x02)
Const CMOD_i2cStart_S = (&H0)   ' source: CmodComm.h(1650)      ((uint8_t)0x00)
Const CMOD_i2cStart_SMBusQuick = (&H3)          ' source: CmodComm.h(1653)      ((uint8_t)0x03)
Const CMOD_i2cStart_SMBusReadBlock = (&H7)      ' source: CmodComm.h(1657)      ((uint8_t)0x07)
Const CMOD_i2cStart_SMBusReadBlockPEC = (&H8)   ' source: CmodComm.h(1658)      ((uint8_t)0x08)
Const CMOD_i2cStart_SMBusWriteBlock = (&H6)     ' source: CmodComm.h(1656)      ((uint8_t)0x06)
Const CMOD_i2cStart_Sr = (&H1)          ' source: CmodComm.h(1651)      ((uint8_t)0x01)
Const CMOD_i2cStart_WriteReadStop = (&H5)       ' source: CmodComm.h(1655)      ((uint8_t)0x05)
Const CMOD_i2cStop = (&HA3)     ' source: CmodComm.h(1668)      ((uint8_t)0xA3)
Const CMOD_i2cWrite_data = (&HA1)       ' source: CmodComm.h(1660)      ((uint8_t)0xA1)
Const CMOD_p8busConfig = (&HAA)         ' source: CmodComm.h(1718)      ((uint8_t)0xAA)
Const CMOD_p8busRead_addr = (&HAC)      ' source: CmodComm.h(1723)      ((uint8_t)0xAC)
Const CMOD_p8busWrite_addr_data = (&HAB)        ' source: CmodComm.h(1721)      ((uint8_t)0xAB)
Const CMOD_spiConfig = (&HAE)   ' source: CmodComm.h(1698)      ((uint8_t)0xAE)
Const CMOD_spiConfig_AutoCS = (&H8)     ' source: CmodComm.h(1707)      ((uint8_t)0x08)
Const CMOD_spiConfig_AutoCS_1Byte = (&H8)       ' source: CmodComm.h(1708)      ((uint8_t)0x08)
Const CMOD_spiConfig_AutoCS_2Bytes = (&H18)     ' source: CmodComm.h(1710)      ((uint8_t)0x18)
Const CMOD_spiConfig_AutoCS_3Bytes = (&H28)     ' source: CmodComm.h(1711)      ((uint8_t)0x28)
Const CMOD_spiConfig_AutoCS_4Bytes = (&H38)     ' source: CmodComm.h(1712)      ((uint8_t)0x38)
Const CMOD_spiConfig_CPHA = (&H1)       ' source: CmodComm.h(1700)      ((uint8_t)0x01)
Const CMOD_spiConfig_CPOL = (&H2)       ' source: CmodComm.h(1701)      ((uint8_t)0x02)
Const CMOD_spiConfig_LSBfirst = (&H4)   ' source: CmodComm.h(1704)      ((uint8_t)0x04)
Const CMOD_spiConfig_Query = (&H80)     ' source: CmodComm.h(1699)      ((uint8_t)0x80)
Const CMOD_spiSpeed = (&HAD)    ' source: CmodComm.h(1695)      ((uint8_t)0xAD)
Const CMOD_spiTransfer = (&HAF)         ' source: CmodComm.h(1715)      ((uint8_t)0xAF)
Const CmdFreq_100Hz = &H50      ' source: CmodComm.h(625)       0x50
Const CmdFreq_100Khz = &H20     ' source: CmodComm.h(622)       0x20
Const CmdFreq_10Hz = &H60       ' source: CmodComm.h(626)       0x60
Const CmdFreq_10Khz = &H30      ' source: CmodComm.h(623)       0x30
Const CmdFreq_10Mhz = &H0       ' source: CmodComm.h(620)       0x00
Const CmdFreq_1Hz = &H70        ' source: CmodComm.h(627)       0x70
Const CmdFreq_1Khz = &H40       ' source: CmodComm.h(624)       0x40
Const CmdFreq_1Mhz = &H10       ' source: CmodComm.h(621)       0x10
Const CmdFreq_Mul_10r0 = &H0    ' source: CmodComm.h(629)       0x00
Const CmdFreq_Mul_1r25 = &H9    ' source: CmodComm.h(638)       0x09
Const CmdFreq_Mul_1r6 = &H8     ' source: CmodComm.h(637)       0x08
Const CmdFreq_Mul_2r0 = &H7     ' source: CmodComm.h(636)       0x07
Const CmdFreq_Mul_2r5 = &H6     ' source: CmodComm.h(635)       0x06
Const CmdFreq_Mul_3r2 = &H5     ' source: CmodComm.h(634)       0x05
Const CmdFreq_Mul_4r0 = &H4     ' source: CmodComm.h(633)       0x04
Const CmdFreq_Mul_5r0 = &H3     ' source: CmodComm.h(632)       0x03
Const CmdFreq_Mul_6r25 = &H2    ' source: CmodComm.h(631)       0x02
Const CmdFreq_Mul_8r0 = &H1     ' source: CmodComm.h(630)       0x01
Const CmdFreq_Query = &H80      ' source: CmodComm.h(628)       0x80
Const CmdPer_100msec = &H70     ' source: CmodComm.h(647)       0x70
Const CmdPer_100nsec = &H10     ' source: CmodComm.h(641)       0x10
Const CmdPer_100usec = &H40     ' source: CmodComm.h(644)       0x40
Const CmdPer_10msec = &H60      ' source: CmodComm.h(646)       0x60
Const CmdPer_10nsec = &H0       ' source: CmodComm.h(640)       0x00
Const CmdPer_10usec = &H30      ' source: CmodComm.h(643)       0x30
Const CmdPer_1msec = &H50       ' source: CmodComm.h(645)       0x50
Const CmdPer_1usec = &H20       ' source: CmodComm.h(642)       0x20
Const CmdPer_Mul_1r0 = &H0      ' source: CmodComm.h(649)       0x00
Const CmdPer_Mul_1r25 = &H1     ' source: CmodComm.h(650)       0x01
Const CmdPer_Mul_1r6 = &H2      ' source: CmodComm.h(651)       0x02
Const CmdPer_Mul_2r0 = &H3      ' source: CmodComm.h(652)       0x03
Const CmdPer_Mul_2r5 = &H4      ' source: CmodComm.h(653)       0x04
Const CmdPer_Mul_3r2 = &H5      ' source: CmodComm.h(654)       0x05
Const CmdPer_Mul_4r0 = &H6      ' source: CmodComm.h(655)       0x06
Const CmdPer_Mul_5r0 = &H7      ' source: CmodComm.h(656)       0x07
Const CmdPer_Mul_6r25 = &H8     ' source: CmodComm.h(657)       0x08
Const CmdPer_Mul_8r0 = &H9      ' source: CmodComm.h(658)       0x09
Const CmdPer_Query = &H80       ' source: CmodComm.h(648)       0x80
Const CmodLogAttempting = 1     ' source: CmodComm.h(853)       1
Const CmodLogFailure = 3        ' source: CmodComm.h(855)       3
Const CmodLogSuccess = 2        ' source: CmodComm.h(854)       2
Const EV_MAXQ_232_ESC_CHAR_0x00 = &HAA  ' source: CmodComm.h(1804)      0xAA
Const EV_MAXQ_232_ESC_CHAR_0x01 = &H80  ' source: CmodComm.h(1805)      0x80
Const EV_MAXQ_232_ESC_CHAR_IDENTIFIER = &H80    ' source: CmodComm.h(1806)      0x80
Const EV_MAXQ_232_MAX_BUF_SIZE = 1024   ' source: CmodComm.h(1802)      1024
Const EV_MAXQ_232_SOF_CHAR_IDENTIFIER = &HAA    ' source: CmodComm.h(1803)      0xAA
Const OK_GPIOset_Kx = (&HF0)    ' source: CmodComm.h(1691)      ((uint8_t)0xF0)
Const OK_getFirmwareVersion = (&HD2)    ' source: CmodComm.h(1731)      ((uint8_t)0xD2)
Const OK_i2cPulseScl9x_0 = (&HB4)       ' source: CmodComm.h(1672)      ((uint8_t)0xB4)
Const OK_i2cRead = (&HB2)       ' source: CmodComm.h(1666)      ((uint8_t)0xB2)
Const OK_i2cSet_BlockAddr = (&HB5)      ' source: CmodComm.h(1676)      ((uint8_t)0xB5)
Const OK_i2cSpeed = (&HB6)      ' source: CmodComm.h(1683)      ((uint8_t)0xB6)
Const OK_i2cStart = (&HB0)      ' source: CmodComm.h(1647)      ((uint8_t)0xB0)
Const OK_i2cStop = (&HB3)       ' source: CmodComm.h(1669)      ((uint8_t)0xB3)
Const OK_i2cWrite = (&HB1)      ' source: CmodComm.h(1661)      ((uint8_t)0xB1)
Const OK_p8busConfig = (&HBA)   ' source: CmodComm.h(1720)      ((uint8_t)0xBA)
Const OK_p8busRead_addr = (&HBC)        ' source: CmodComm.h(1724)      ((uint8_t)0xBC)
Const OK_p8busWrite_addr_data = (&HBB)  ' source: CmodComm.h(1722)      ((uint8_t)0xBB)
Const OK_spiConfig = (&HBE)     ' source: CmodComm.h(1714)      ((uint8_t)0xBE)
Const OK_spiSpeed = (&HBD)      ' source: CmodComm.h(1697)      ((uint8_t)0xBD)
Const OK_spiTransfer = (&HBF)   ' source: CmodComm.h(1716)      ((uint8_t)0xBF)

